import logging
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
import os


STANDARD_TOKEN = os.environ.get("STANDARD_TOKEN")


# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="1913319721:AAFPa-vvm1RMBBcg3Ya5jpsrFNUb0m5N8nA")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot, storage=MemoryStorage())
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


def get_reply_keyboard(buttons: list):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    return keyboard


class Form(StatesGroup):
    services = State()
    site = State()
    email = State()
    send_message = State()


async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–£—Å–ª—É–≥–∏"),
        types.BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å")
    ])


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands="start")
async def cmd_test1(message: types.Message):
    keyboard = get_reply_keyboard(["–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã kopeechka.storeüìß"])
    await Form.services.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup=keyboard)


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–•–æ—Ä–æ—à–æ')


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message):
    await message.reply('–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start')


"""# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–Ω–∞–∑–∞–¥'
@dp.message_handler(lambda message: message.text == "–Ω–∞–∑–∞–¥", state='*')
async def get_previous_state(message: types.Message):
    await Form.previous()"""


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ–π —É—Å–ª—É–≥–∏
@dp.message_handler(lambda message: message.text != "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã kopeechka.storeüìß",
                    state=Form.services)
async def which_api_key_use_invalid(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —É—Å–ª—É–≥—É.")


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ª—É–≥—É
# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å —Ç–∏–ø–æ–º API KEY
@dp.message_handler(state=Form.services)
async def process_name(message: types.Message, state: FSMContext):
    keyboard = get_reply_keyboard(["facebook.com", "vk.com"])
    await Form.site.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–∞–π—Ç –∏–ª–∏ –≤—ã–±–∏—Ä—Ç–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.", reply_markup=keyboard)


@dp.message_handler(state=Form.site)
async def process_site(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['site'] = message.text
        await Form.email.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email")


# –°–æ—Ö—Ä–∞–Ω—è–µ–º email
@dp.message_handler(state=Form.email)
async def process_get_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['email'] = message.text
        keyboard = get_reply_keyboard(["–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"])
        await message.answer(f"–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—á—Ç—É...")
        response = requests.get(
            'http://api.kopeechka.store/mailbox-reorder',
            params={'token': STANDARD_TOKEN,
                    'site': data['site'],
                    'email': data['email'],
                    'type': 'json',
                    'api': '2.0'},
        )
        response = response.json()
        if response['status'] == 'OK':
            data['task_id'] = response['id']
            await Form.next()
            await message.answer("–ü–æ—á—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            await message.answer(f"–ù–∞ —Å–∞–π—Ç–µ {data['site']} –Ω–∞–∂–º–∏—Ç–µ "
                                 f"–ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ –ø–æ—á—Ç–µ, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'",
                                 reply_markup=keyboard)
        else:
            await message.answer("API –∏–ª–∏ email –∏–ª–∏ —Å–∞–π—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∏—Ö",
                                 reply_markup=get_reply_keyboard(["–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã kopeechka.storeüìß"]))
            await Form.services.set()


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –∫–æ–ø–µ–µ—á–∫–∏
@dp.message_handler(lambda message: message.text == "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    state=Form.send_message)
async def process_get_code(message: types.Message, state: FSMContext):
    keyboard = get_reply_keyboard(["–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã kopeechka.storeüìß"])
    await message.answer("–°–µ–π—á–∞—Å –ø–æ–ª—É—á–∏–º –∫–æ–¥")
    async with state.proxy() as data:
        task_id = data['task_id']
        response = {"value": "WAIT_LINK"}
        i = 0
        while response['value'] == "WAIT_LINK":
            if i == 5:
                await message.answer("–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–∏—Å—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ –∑–∞–Ω–≤–æ–≤–æ.",
                                     reply_markup=get_reply_keyboard(["–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã kopeechka.storeüìß"]))
                await Form.services.set()
                break
            response = requests.get(
                'http://api.kopeechka.store/mailbox-get-message',
                params={'full': '0',
                        'id': task_id,
                        'token': STANDARD_TOKEN,
                        'type': 'json',
                        'api': '2.0'},
            )
            response = response.json()
            if response['status'] == "OK":
                await message.answer(response['fullmessage'], reply_markup=keyboard)
                await Form.services.set()
            elif response['status'] == "ERROR" and response['value'] != "WAIT_LINK":
                await message.answer(f"–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel",
                                     reply_markup=get_reply_keyboard(["–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"]))
                break
            i += 1


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True, on_startup=set_default_commands)
